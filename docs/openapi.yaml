openapi: 3.0.3
info:
  title: ComfyUI Serverless API
  description: REST API for ComfyUI task scheduling and worker management system
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT

servers:
  - url: http://localhost:8080
    description: Development environment
  - url: https://api.example.com
    description: Production environment

tags:
  - name: Tasks
    description: Task management related APIs
  - name: Workers
    description: Worker management related APIs
  - name: Queue
    description: Queue management related APIs
  - name: Health
    description: Health check related APIs

paths:
  /api/v1/tasks:
    post:
      tags: [Tasks]
      summary: Submit new task
      description: Create and submit a new ComfyUI workflow task to the queue
      operationId: submitTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitTaskRequest'
            examples:
              simple_workflow:
                summary: Simple workflow example
                value:
                  workflow_id: text_to_image_v1
                  priority: 5
                  payload:
                    prompt: A beautiful landscape
                    steps: 20
                    cfg_scale: 7.5
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags: [Tasks]
      summary: List tasks
      description: Get task list, can be filtered by status
      operationId: listTasks
      parameters:
        - name: status
          in: query
          description: Filter by task status
          required: false
          schema:
            $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: Task list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResponse'
                  count:
                    type: integer
                    description: Total number of tasks
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/tasks/{id}:
    get:
      tags: [Tasks]
      summary: Get task details
      description: Get detailed information of a task by task ID
      operationId: getTask
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Tasks]
      summary: Cancel task
      description: Cancel a specified task (only for pending or running tasks)
      operationId: cancelTask
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task cancelled successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/workers:
    get:
      tags: [Workers]
      summary: List all workers
      description: Get list of all workers and their status information
      operationId: listWorkers
      responses:
        '200':
          description: Worker list retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkerResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/workers/{id}:
    get:
      tags: [Workers]
      summary: Get worker details
      description: Get detailed information of a worker by worker ID
      operationId: getWorker
      parameters:
        - $ref: '#/components/parameters/WorkerId'
      responses:
        '200':
          description: Worker details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/workers/metrics:
    get:
      tags: [Workers]
      summary: Get worker metrics
      description: Get statistical metrics information of workers
      operationId: getWorkerMetrics
      responses:
        '200':
          description: Worker metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerMetrics'

  /api/v1/queue/metrics:
    get:
      tags: [Queue]
      summary: Get queue metrics
      description: Get statistical metrics information of task queue
      operationId: getQueueMetrics
      responses:
        '200':
          description: Queue metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueMetrics'

  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Check the health status of the service
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time

  /ready:
    get:
      tags: [Health]
      summary: Readiness check
      description: Check if the service is ready to receive requests
      operationId: readinessCheck
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
                  timestamp:
                    type: string
                    format: date-time
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

components:
  parameters:
    TaskId:
      name: id
      in: path
      description: Task ID
      required: true
      schema:
        type: string
        format: uuid

    WorkerId:
      name: id
      in: path
      description: Worker ID
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    SubmitTaskRequest:
      type: object
      required: [workflow_id, payload]
      properties:
        workflow_id:
          type: string
          description: Workflow ID
          example: text_to_image_v1
        priority:
          type: integer
          description: Task priority (higher number means higher priority)
          default: 0
          minimum: 0
          maximum: 10
        payload:
          type: object
          description: Task payload data
          additionalProperties: true
          example:
            prompt: A beautiful landscape
            steps: 20
            cfg_scale: 7.5

    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Task unique identifier
        workflow_id:
          type: string
          description: Workflow ID
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          type: integer
          description: Task priority
        payload:
          type: object
          description: Task payload data
          additionalProperties: true
        worker_id:
          type: string
          format: uuid
          description: Worker ID executing the task
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Task creation time
        started_at:
          type: string
          format: date-time
          description: Task start execution time
          nullable: true
        completed_at:
          type: string
          format: date-time
          description: Task completion time
          nullable: true
        result:
          type: object
          description: Task execution result
          additionalProperties: true
          nullable: true
        error:
          type: string
          description: Error message (if task failed)
          nullable: true
        retry_count:
          type: integer
          description: Retry count
        max_retries:
          type: integer
          description: Maximum retry count

    WorkerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Worker unique identifier
        pod_name:
          type: string
          description: Pod name
        status:
          $ref: '#/components/schemas/WorkerStatus'
        endpoint:
          type: string
          description: Worker endpoint URL
        port:
          type: integer
          description: Worker port
        current_task_id:
          type: string
          format: uuid
          description: Current executing task ID
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Worker creation time
        started_at:
          type: string
          format: date-time
          description: Worker start time
          nullable: true
        last_active_at:
          type: string
          format: date-time
          description: Last active time
        last_health_check:
          type: string
          format: date-time
          description: Last health check time
        health_status:
          type: boolean
          description: Health status
        resources:
          $ref: '#/components/schemas/ResourceSpec'

    ResourceSpec:
      type: object
      properties:
        cpu:
          type: string
          description: CPU resource specification
          example: "2"
        memory:
          type: string
          description: Memory resource specification
          example: "4Gi"
        gpu:
          type: string
          description: GPU resource specification
          example: "1"
          nullable: true

    WorkerMetrics:
      type: object
      properties:
        total_workers:
          type: integer
          description: Total number of workers
        pending_workers:
          type: integer
          description: Number of pending workers
        starting_workers:
          type: integer
          description: Number of starting workers
        running_workers:
          type: integer
          description: Number of running workers
        idle_workers:
          type: integer
          description: Number of idle workers
        terminating_workers:
          type: integer
          description: Number of terminating workers
        failed_workers:
          type: integer
          description: Number of failed workers

    QueueMetrics:
      type: object
      properties:
        pending_tasks:
          type: integer
          description: Number of pending tasks
        running_tasks:
          type: integer
          description: Number of running tasks
        completed_tasks:
          type: integer
          description: Number of completed tasks
        failed_tasks:
          type: integer
          description: Number of failed tasks
        total_tasks:
          type: integer
          description: Total number of tasks

    TaskStatus:
      type: string
      enum: [pending, running, completed, failed, cancelled]
      description: Task status

    WorkerStatus:
      type: string
      enum: [pending, starting, running, idle, terminating, failed]
      description: Worker status

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Detailed error description

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ServiceUnavailable:
      description: Service is not ready
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse' 